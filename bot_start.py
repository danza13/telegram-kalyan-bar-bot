import logging
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    WebAppInfo,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)
from dotenv import load_dotenv
import os

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑ —Ñ–∞–π–ª—É .env
load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
GROUP_CHAT_ID = os.getenv("GROUP_CHAT_ID")
WEB_APP_URL = os.getenv("WEB_APP_URL")

if not TOKEN or not GROUP_CHAT_ID or not WEB_APP_URL:
    raise ValueError("BOT_TOKEN, GROUP_CHAT_ID –∞–±–æ WEB_APP_URL –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ —É —Ñ–∞–π–ª—ñ .env")

try:
    GROUP_CHAT_ID = int(GROUP_CHAT_ID)
except ValueError:
    raise ValueError("GROUP_CHAT_ID –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º.")

# –£–≤—ñ–º–∫–Ω–µ–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –°—Ç–∞–Ω –±–æ—Ç–∞
CHOOSING, ESTABLISHMENT, DATETIME_SELECT, GUESTS = range(4)

# –°–ø–∏—Å–æ–∫ –∑–∞–∫–ª–∞–¥—ñ–≤
ESTABLISHMENTS = ['–í—É–ª. –ê–Ω—Ç–æ–Ω–æ–≤–∏—á–∞', '–ø—Ä-—Ç. –¢–∏—á–∏–Ω–∏']

# –û–±—Ä–æ–±–Ω–∏–∫ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    logger.info("–û–±—Ä–æ–±–Ω–∏–∫ start –≤–∏–∫–ª–∏–∫–∞–Ω–æ.")
    reply_keyboard = [['–ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Å—Ç–æ–ª–∏–∫', '–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–Ω—é']]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–í—ñ—Ç–∞—î–º–æ –≤–∞—Å —É Telegram-–±–æ—Ç—ñ –∫–∞–ª—å—è–Ω-–±–∞—Ä—É!\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=markup)
    return CHOOSING

# –û–±—Ä–æ–±–Ω–∏–∫ –ø–µ—Ä–µ–≥–ª—è–¥—É –º–µ–Ω—é
async def view_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    logger.info("–û–±—Ä–æ–±–Ω–∏–∫ view_menu –≤–∏–∫–ª–∏–∫–∞–Ω–æ.")
    await update.message.reply_text("–ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –Ω–∞—à–µ –º–µ–Ω—é: https://gustouapp.com/menu")
    return CHOOSING

# –û–±—Ä–æ–±–Ω–∏–∫ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
async def reserve_table(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    logger.info("–û–±—Ä–æ–±–Ω–∏–∫ reserve_table –≤–∏–∫–ª–∏–∫–∞–Ω–æ.")
    reply_keyboard = [[loc] for loc in ESTABLISHMENTS]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –∑–∞–∫–ª–∞–¥ –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è:", reply_markup=markup)
    return ESTABLISHMENT

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –∑–∞–∫–ª–∞–¥—É
async def establishment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    establishment = update.message.text
    logger.info(f"–í–∏–±—Ä–∞–Ω–æ –∑–∞–∫–ª–∞–¥: {establishment}")
    context.user_data['establishment'] = establishment

    keyboard = [[InlineKeyboardButton("–û–±—Ä–∞—Ç–∏ –¥–∞—Ç—É —Ç–∞ —á–∞—Å", web_app=WebAppInfo(url=WEB_APP_URL))]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É, —â–æ–± –æ–±—Ä–∞—Ç–∏ –¥–∞—Ç—É —Ç–∞ —á–∞—Å:", reply_markup=reply_markup)
    return DATETIME_SELECT

    WEB_APP_URL = "https://danza13.github.io/telegram-webapp/"

# –û–±—Ä–æ–±–Ω–∏–∫ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ Web App
async def web_app_data_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    logger.info("üîÑ –û–±—Ä–æ–±–Ω–∏–∫ web_app_data_handler –≤–∏–∫–ª–∏–∫–∞–Ω–æ.")
    print("üîÑ web_app_data_handler –≤–∏–∫–ª–∏–∫–∞–Ω–æ.")  # –î–µ–±–∞–≥

    if update.message and update.message.web_app_data:
        received_data = update.message.web_app_data.data
        logger.info(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ –∑ WebApp: {received_data}")
        print(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ: {received_data}")  # –î–µ–±–∞–≥

        context.user_data['datetime'] = received_data  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞—Ç—É

        await update.message.reply_text(f"‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ –¥–∞—Ç—É —Ç–∞ —á–∞—Å: {received_data}")
        await update.message.reply_text("üìå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ—Å—Ç–µ–π:")
        return GUESTS

    else:
        logger.error("‚ùå –î–∞–Ω—ñ –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω—ñ!")
        print("‚ùå –î–∞–Ω—ñ –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω—ñ!")  # –î–µ–±–∞–≥
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –¥–∞–Ω—ñ –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω—ñ.")
        return DATETIME_SELECT

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≥–æ—Å—Ç–µ–π
async def guests_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    guests_text = update.message.text
    if not guests_text.isdigit() or int(guests_text) <= 0:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ—Å—Ç–µ–π (—á–∏—Å–ª–æ).")
        return GUESTS

    context.user_data['guests'] = int(guests_text)
    await update.message.reply_text("–í–∞—à–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å–∞–Ω–µ! –ù–∞—à –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏.")
    return ConversationHandler.END

# –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def return_to_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    logger.info("–û–±—Ä–æ–±–Ω–∏–∫ return_to_start –≤–∏–∫–ª–∏–∫–∞–Ω–æ.")
    reply_keyboard = [['–ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Å—Ç–æ–ª–∏–∫', '–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–Ω—é']]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=markup)
    return CHOOSING

# –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    logger.info("–û–±—Ä–æ–±–Ω–∏–∫ cancel –≤–∏–∫–ª–∏–∫–∞–Ω–æ.")
    await update.message.reply_text("–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=ReplyKeyboardMarkup([['–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –ø–æ—á–∞—Ç–∫—É']], resize_keyboard=True))
    return ConversationHandler.END

# –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error(msg="Exception while handling an update:", exc_info=context.error)

def main():
    if not TOKEN or not GROUP_CHAT_ID or not WEB_APP_URL:
        logger.error("BOT_TOKEN, GROUP_CHAT_ID –∞–±–æ WEB_APP_URL –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ.")
        return

    application = ApplicationBuilder().token(TOKEN).build()

    application.add_handler(CommandHandler('start', start))
    application.add_handler(MessageHandler(filters.Regex('^–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –ø–æ—á–∞—Ç–∫—É$'), return_to_start))
    application.add_handler(MessageHandler(filters.Regex('^–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–Ω—é$'), view_menu))

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^–ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Å—Ç–æ–ª–∏–∫$'), reserve_table)],
        states={
            CHOOSING: [
                MessageHandler(filters.Regex('^–ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Å—Ç–æ–ª–∏–∫$'), reserve_table),
                MessageHandler(filters.Regex('^–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–Ω—é$'), view_menu),
            ],
            ESTABLISHMENT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, establishment_handler)
            ],
            DATETIME_SELECT: [
                MessageHandler(filters.ALL, web_app_data_handler)
            ],
            GUESTS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, guests_handler)
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    application.add_handler(conv_handler)
    application.add_error_handler(error_handler)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å...")
    application.run_polling()

if __name__ == '__main__':
    main()
