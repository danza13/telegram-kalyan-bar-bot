import os
import logging
import re
import json
from datetime import datetime

from aiogram import Bot, Dispatcher, types
from aiogram.types import (ReplyKeyboardMarkup, KeyboardButton, WebAppInfo,
                           ReplyKeyboardRemove, ContentType)
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor

logging.basicConfig(level=logging.INFO)

# ===================================================================
# 1. –ó–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è
# ===================================================================
BOT_TOKEN = os.getenv("BOT_TOKEN")        # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")  # ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞

if not BOT_TOKEN:
    raise ValueError("–£ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ BOT_TOKEN!")
if not ADMIN_CHAT_ID:
    raise ValueError("–£ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ADMIN_CHAT_ID!")

# ===================================================================
# 2. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
# ===================================================================
bot = Bot(token=BOT_TOKEN, parse_mode=types.ParseMode.HTML)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# ===================================================================
# 3. –°—Ç–∞–Ω‚Äë–º–∞—à–∏–Ω–∞
# ===================================================================
class BookingStates(StatesGroup):
    CONFIRM_DATA = State()
    WAITING_PHONE = State()

# ===================================================================
# 4. –¢–∏–º—á–∞—Å–æ–≤–µ —Å—Ö–æ–≤–∏—â–µ
# ===================================================================
user_booking_data: dict[int, dict] = {}

# ===================================================================
# 5. –•–µ–Ω–¥–ª–µ—Ä–∏
# ===================================================================

@dp.message_handler(commands=['start'], state='*')
async def cmd_start(message: types.Message, state: FSMContext):
    await state.finish()
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üçΩ–ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Å—Ç–æ–ª–∏–∫"))
    kb.add(KeyboardButton(
        text="üìï–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–Ω—é",
        web_app=WebAppInfo(url="https://gustouapp.com/menu")
    ))
    await message.answer(
        "–í—ñ—Ç–∞—î–º–æ –≤–∞—Å –≤ Telegram‚Äë–±–æ—Ç—ñ –∫–∞–ª—å—è–Ω‚Äë–±–∞—Ä GUSTO√öüí®\n"
        "–¢—É—Ç –í–∏ –º–æ–∂–µ—Ç–µ:\n"
        "üçΩ¬†–ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Å—Ç–æ–ª–∏–∫\n"
        "üìï¬†–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–Ω—é",
        reply_markup=kb
    )

@dp.message_handler(lambda m: m.text == "üçΩ–ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Å—Ç–æ–ª–∏–∫", state='*')
async def cmd_book_table(message: types.Message, state: FSMContext):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton(
        "üì≤–í—ñ–¥–∫—Ä–∏—Ç–∏ —Ñ–æ—Ä–º—É –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è",
        web_app=WebAppInfo(
            url="https://danza13.github.io/telegram-kalyan-bar-bot/index.html")
    ))
    kb.add(KeyboardButton("‚¨ÖÔ∏è–ù–∞–∑–∞–¥"))
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=kb)

@dp.message_handler(lambda m: m.text == "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", state='*')
async def cmd_back(message: types.Message, state: FSMContext):
    await cmd_start(message, state)

@dp.message_handler(content_types=ContentType.WEB_APP_DATA, state='*')
async def handle_webapp_data(message: types.Message, state: FSMContext):
    try:
        data = json.loads(message.web_app_data.data)
    except Exception as e:
        logging.warning(f"JSON¬†error: {e}")
        await message.answer("–ü–æ–º–∏–ª–∫–∞ –≤ –¥–∞–Ω–∏—Ö —Ñ–æ—Ä–º–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    user_id = message.from_user.id
    place = data.get("place")
    datetime_raw = data.get("datetime")
    name = data.get("name")
    guests = data.get("guests")

    if not all([place, datetime_raw, name, guests]):
        await message.answer("–î–µ—è–∫—ñ –ø–æ–ª—è –ø–æ—Ä–æ–∂–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    try:
        dt = datetime.strptime(datetime_raw, "%d.%m.%Y %H:%M")
        dt_str = dt.strftime("%d.%m.%Y %H:%M")
    except ValueError:
        dt_str = datetime_raw

    user_booking_data[user_id] = {
        "place": place, "datetime_str": dt_str,
        "guests": guests, "name": name
    }

    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("–î–∞–ª—ñ"))
    url_edit = (
        f"https://danza13.github.io/telegram-kalyan-bar-bot/index.html"
        f"?place={place}&datetime={datetime_raw}&name={name}&guests={guests}"
    )
    kb.add(KeyboardButton("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏", web_app=WebAppInfo(url=url_edit)))
    kb.add(KeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏"))
    await message.answer(
        "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∞—à—ñ –¥–∞–Ω—ñ\n"
        f"üè†¬†{place}\nüïí¬†{dt_str}\nüë•¬†{guests}\nüìù¬†{name}\n\n"
        "–Ø–∫—â–æ –≤—Å–µ –≤—ñ—Ä–Ω–æ ‚Äì –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–î–∞–ª—ñ¬ª",
        reply_markup=kb
    )
    await BookingStates.CONFIRM_DATA.set()

@dp.message_handler(lambda m: m.text == "–°–∫–∞—Å—É–≤–∞—Ç–∏",
                    state=[BookingStates.CONFIRM_DATA,
                           BookingStates.WAITING_PHONE])
async def cmd_cancel(message: types.Message, state: FSMContext):
    user_booking_data.pop(message.from_user.id, None)
    await state.finish()
    await message.answer("–ë—Ä–æ–Ω—å —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    await cmd_start(message, state)

@dp.message_handler(lambda m: m.text == "–î–∞–ª—ñ",
                    state=BookingStates.CONFIRM_DATA)
async def cmd_confirm(message: types.Message, state: FSMContext):
    await BookingStates.WAITING_PHONE.set()
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True))
    kb.add(KeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏"))
    await message.answer(
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É:",
        reply_markup=kb)

@dp.message_handler(content_types=[ContentType.CONTACT, ContentType.TEXT],
                    state=BookingStates.WAITING_PHONE)
async def cmd_phone(message: types.Message, state: FSMContext):
    uid = message.from_user.id
    if uid not in user_booking_data:
        await state.finish()
        await message.answer("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è. –ü–æ—á–Ω—ñ—Ç—å –∑ /start.")
        return

    raw = message.contact.phone_number if message.contact else message.text
    digits = re.sub(r"\D+", "", raw)
    if len(digits) != 12 or not digits.startswith("380"):
        await message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä. –§–æ—Ä–º–∞—Ç: +380XXXXXXXXX")
        return
    phone = "+" + digits

    data = user_booking_data[uid]
    data["phone"] = phone

    await bot.send_message(
        ADMIN_CHAT_ID,
        "üìÖ¬†<b>–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è</b>\n"
        f"üè†¬†{data['place']}\n"
        f"üïí¬†{data['datetime_str']}\n"
        f"üë•¬†{data['guests']}\n"
        f"üìù¬†{data['name']}\n"
        f"üìû¬†{phone}"
    )

    kb = ReplyKeyboardMarkup(resize_keyboard=True).add("–ì–æ—Ç–æ–≤–æ")
    await message.answer(
        "–î—è–∫—É—î–º–æ! –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ ‚úÖ\n"
        "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.",
        reply_markup=kb)
    await state.finish()

@dp.message_handler(lambda m: m.text == "–ì–æ—Ç–æ–≤–æ", state='*')
async def cmd_done(message: types.Message, state: FSMContext):
    await cmd_start(message, state)

# ===============================================================
# 6.  Port binding –¥–ª—è Render + –∑–∞–ø—É—Å–∫ long‚Äëpoll
# ===============================================================
import aiohttp.web as web   # –¥–æ–¥–∞—î–º–æ aiohttp

PORT = int(os.getenv("PORT", 8080))  # Render –∑–∞–¥–∞—î PORT –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ

async def healthcheck(request):
    """–ü—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ 200 OK ‚Äì Render –±–∞—á–∏—Ç—å, —â–æ –ø–æ—Ä—Ç —Å–ª—É—Ö–∞—î."""
    return web.Response(text="OK")

async def start_webserver():
    app_web = web.Application()
    app_web.add_routes([web.get("/", healthcheck)])   # GET /  ‚Üí OK
    runner = web.AppRunner(app_web)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()
    logging.info(f"HTTP‚Äë—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—ñ {PORT}")

async def on_startup(dp):
    # 1) –ø—Ä–∏–±–∏—Ä–∞—î–º–æ —Å—Ç–∞—Ä–∏–π –≤–µ–±—Ö—É–∫, —è–∫—â–æ –∫–æ–ª–∏—Å—å —Å—Ç–∞–≤–∏–ª–∏
    await bot.delete_webhook(drop_pending_updates=True)
    # 2) –∑–∞–ø—É—Å–∫–∞—î–º–æ –º–∞–ª–µ–Ω—å–∫–∏–π –≤–µ–±‚Äë—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
    await start_webserver()

if __name__ == "__main__":
    executor.start_polling(
        dp,
        skip_updates=True,
        on_startup=on_startup
    )
