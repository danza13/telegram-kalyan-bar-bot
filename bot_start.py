import os
import logging
import re
from datetime import datetime

from aiogram import Bot, Dispatcher, types
from aiogram.types import (ReplyKeyboardMarkup, KeyboardButton, WebAppInfo, 
                           ReplyKeyboardRemove, ContentType)
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor

logging.basicConfig(level=logging.INFO)

# ==============================================================================
# 1. –ó–ú–Ü–ù–ù–Ü –û–¢–û–ß–ï–ù–ù–Ø
# ==============================================================================
BOT_TOKEN = os.getenv("BOT_TOKEN")  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –Ω–∞ Render)
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")  # ID —á–∞—Ç—É –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å
WEBHOOK_DOMAIN = os.getenv("WEBHOOK_DOMAIN")  # –í–∞—à –¥–æ–º–µ–Ω –≤—ñ–¥ Render (–±–µ–∑ "/" –≤ –∫—ñ–Ω—Ü—ñ)
if not BOT_TOKEN:
    raise ValueError("–£ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ BOT_TOKEN!")
if not ADMIN_CHAT_ID:
    raise ValueError("–£ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ADMIN_CHAT_ID!")
if not WEBHOOK_DOMAIN:
    raise ValueError("–£ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ WEBHOOK_DOMAIN!")

# –§–æ—Ä–º—É—î–º–æ URL webhook
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{WEBHOOK_DOMAIN}{WEBHOOK_PATH}"

# ==============================================================================
# 2. –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –ë–û–¢–ê –¢–ê DISPATCHER
# ==============================================================================
bot = Bot(token=BOT_TOKEN, parse_mode=types.ParseMode.HTML)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


# ==============================================================================
# 3. –ö–õ–ê–°–ò –°–¢–ê–ù–Ü–í (FSM)
# ==============================================================================
class BookingStates(StatesGroup):
    WAITING_WEBAPP_DATA = State()  # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥–∫—Ä–∏–≤ —Ñ–æ—Ä–º—É –π –Ω–∞–¥—ñ—à–ª–µ –¥–∞–Ω—ñ
    CONFIRM_DATA = State()         # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è / —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è / —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
    WAITING_PHONE = State()        # –û—á—ñ–∫—É—î–º–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É


# ==============================================================================
# 4. –¢–ò–ú–ß–ê–°–û–í–ï –ó–ë–ï–†–Ü–ì–ê–ù–ù–Ø –î–ê–ù–ò–• (in-memory)
# ==============================================================================
# user_booking_data[user_id] = {
#     "place": ...,
#     "datetime_str": ...,
#     "guests": ...,
#     "name": ...,
#     "phone": ...
# }
user_booking_data = {}


# ==============================================================================
# 5. –•–ï–ù–î–õ–ï–†–ò
# ==============================================================================
@dp.message_handler(commands=['start'], state='*')
async def cmd_start(message: types.Message, state: FSMContext):
    """
    –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –ø—ñ—Å–ª—è /start –∞–±–æ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –µ–∫—Ä–∞–Ω—É.
    """
    await state.finish()  # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω–∏, —è–∫—â–æ –±—É–ª–∏

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    btn_menu = KeyboardButton(
        text="üìï–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–Ω—é",
        web_app=WebAppInfo(url="https://gustouapp.com/menu")
    )
    btn_book = KeyboardButton(text="üçΩ–ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Å—Ç–æ–ª–∏–∫")
    keyboard.add(btn_book)
    keyboard.add(btn_menu)

    text = (
        "–í—ñ—Ç–∞—î–º–æ –≤–∞—Å –≤ Telegram-–±–æ—Ç –∫–∞–ª—å—è–Ω-–±–∞—Ä GUSTO√öüí®\n"
        "–¢—É—Ç –í–∏ –º–æ–∂–µ—Ç–µ:\n"
        "üçΩ –ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Å—Ç–æ–ª–∏–∫\n"
        "üìï –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–Ω—é\n"
    )
    await message.answer(text, reply_markup=keyboard)


@dp.message_handler(lambda m: m.text == "üçΩ–ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Å—Ç–æ–ª–∏–∫", state='*')
async def process_booking_menu(message: types.Message, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—É—î –∫–Ω–æ–ø–∫–∏: –ù–∞–∑–∞–¥, –í—ñ–¥–∫—Ä–∏—Ç–∏ —Ñ–æ—Ä–º—É.
    """
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    btn_back = KeyboardButton(text="‚¨ÖÔ∏è–ù–∞–∑–∞–¥")
    # –ö–Ω–æ–ø–∫–∞ –∑ WebApp (—Ñ–æ—Ä–º–∞ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è)
    btn_open_form = KeyboardButton(
        text="üì≤–í—ñ–¥–∫—Ä–∏—Ç–∏ —Ñ–æ—Ä–º—É –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è",
        web_app=WebAppInfo(url="https://danza13.github.io/telegram-kalyan-bar-bot/index.html")
    )
    keyboard.add(btn_open_form)
    keyboard.add(btn_back)

    await message.answer("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=keyboard)


@dp.message_handler(lambda m: m.text == "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", state='*')
async def process_back_to_main(message: types.Message, state: FSMContext):
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.
    """
    await cmd_start(message, state)


@dp.message_handler(content_types=ContentType.WEB_APP_DATA, state='*')
async def webapp_data_handler(message: types.Message, state: FSMContext):
    """
    –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–¥—ñ—Å–ª–∞–≤ –¥–∞–Ω—ñ –∑ WebApp —á–µ—Ä–µ–∑ tg.sendData().
    """
    import json
    try:
        data = json.loads(message.web_app_data.data)
    except:
        await message.answer("–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö –∑ —Ñ–æ—Ä–º–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    # –û—á—ñ–∫—É—î–º–æ, —â–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –æ–±'—î–∫—Ç:
    # {
    #   "place": "...",
    #   "datetime": "...",
    #   "guests": "...",
    #   "name": "..."
    # }
    user_id = message.from_user.id
    place = data.get("place")
    datetime_raw = data.get("datetime")
    guests = data.get("guests")
    name = data.get("name")

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ
    user_booking_data[user_id] = {
        "place": place,
        "datetime_str": datetime_raw,
        "guests": guests,
        "name": name
    }

    # –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–∞—Ç—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ "2025-04-13T18:10" -> "13.04.2025 18:10")
    formatted_dt = datetime_raw
    try:
        dt = datetime.strptime(datetime_raw, "%Y-%m-%dT%H:%M")
        formatted_dt = dt.strftime("%d.%m.%Y %H:%M")
        user_booking_data[user_id]["datetime_str"] = formatted_dt
    except:
        pass

    # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É
    check_text = (
        "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∞—à—ñ –¥–∞–Ω—ñ\n"
        f"üè† –ó–∞–∫–ª–∞–¥: {place}\n"
        f"üïí –ß–∞—Å —Ç–∞ –¥–∞—Ç–∞: {formatted_dt}\n"
        f"üë• –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ—Å—Ç–µ–π: {guests}\n"
        f"üìù –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ –æ—Å–æ–±–∞: {name}"
    )
    await message.answer(check_text)

    # –ü—Ä–æ–ø–æ–Ω—É—î–º–æ "–î–∞–ª—ñ", "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏", "–°–∫–∞—Å—É–≤–∞—Ç–∏"
    text_next = "–Ø–∫—â–æ –≤—Å–µ –≤—ñ—Ä–Ω–æ ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–î–∞–ª—ñ¬ª"
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    btn_next = KeyboardButton("–î–∞–ª—ñ")

    # URL –¥–ª—è "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏" (–ø—ñ–¥—Å—Ç–∞–≤–∏–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏)
    base_url = "https://danza13.github.io/telegram-kalyan-bar-bot/index.html"
    url_with_data = (
        f"{base_url}?place={place}&datetime={datetime_raw}&guests={guests}&name={name}"
    )
    btn_edit = KeyboardButton(
        text="–†–µ–¥–∞–≥—É–≤–∞—Ç–∏",
        web_app=WebAppInfo(url=url_with_data)
    )
    btn_cancel = KeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏")
    keyboard.add(btn_next, btn_edit, btn_cancel)

    await message.answer(text_next, reply_markup=keyboard)
    await BookingStates.CONFIRM_DATA.set()


@dp.message_handler(lambda m: m.text == "–°–∫–∞—Å—É–≤–∞—Ç–∏", state=[BookingStates.CONFIRM_DATA, BookingStates.WAITING_PHONE])
async def process_cancel_booking(message: types.Message, state: FSMContext):
    """
    –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –Ω–∞ –±—É–¥—å-—è–∫–æ–º—É –∑ –¥–≤–æ—Ö —Å—Ç–∞–Ω—ñ–≤.
    """
    user_id = message.from_user.id
    user_booking_data.pop(user_id, None)  # –í–∏–¥–∞–ª—è—î–º–æ –¥–∞–Ω—ñ, —è–∫—â–æ —ñ—Å–Ω—É—é—Ç—å

    await state.finish()
    await message.answer("–ë—Ä–æ–Ω—å —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    await cmd_start(message, state)


@dp.message_handler(lambda m: m.text == "–î–∞–ª—ñ", state=BookingStates.CONFIRM_DATA)
async def process_confirm_data(message: types.Message, state: FSMContext):
    """
    –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–≤–µ–¥–µ–Ω–Ω—è / –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É.
    """
    await BookingStates.WAITING_PHONE.set()

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    btn_share = KeyboardButton(
        text="–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º",
        request_contact=True
    )
    btn_cancel = KeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏")
    keyboard.add(btn_share, btn_cancel)

    await message.answer(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:",
        reply_markup=keyboard
    )


@dp.message_handler(content_types=[ContentType.CONTACT, ContentType.TEXT], state=BookingStates.WAITING_PHONE)
async def process_phone(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id not in user_booking_data:
        await message.answer("–î–∞–Ω—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ /start.")
        await state.finish()
        return

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–¥—ñ–ª–∏–≤—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
    if message.contact:
        raw_phone = message.contact.phone_number
    else:
        raw_phone = message.text

    # –ó–∞–ª–∏—à–∞—î–º–æ –ª–∏—à–µ —Ü–∏—Ñ—Ä–∏
    digits = re.sub(r"\D+", "", raw_phone)

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É +380...
    if len(digits) == 12 and digits.startswith("380"):
        phone = "+" + digits
    else:
        await message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —É —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX")
        return

    user_booking_data[user_id]["phone"] = phone

    # –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ
    place = user_booking_data[user_id]["place"]
    dt_str = user_booking_data[user_id]["datetime_str"]
    guests = user_booking_data[user_id]["guests"]
    name = user_booking_data[user_id]["name"]

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É (ADMIN_CHAT_ID)
    admin_text = (
        "üìÖ <b>–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è</b>\n"
        f"üè† –ó–∞–∫–ª–∞–¥: {place}\n"
        f"üïí –ß–∞—Å —Ç–∞ –¥–∞—Ç–∞: {dt_str}\n"
        f"üë• –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ—Å—Ç–µ–π: {guests}\n"
        f"üìù –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ –æ—Å–æ–±–∞: {name}\n"
        f"üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {phone}"
    )
    await bot.send_message(ADMIN_CHAT_ID, admin_text)

    # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    await message.answer(
        "–î—è–∫—É—î–º–æ, –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ! ‚úÖ\n"
        "–ù–∞—à –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ–∑–∞–±–∞—Ä–æ–º –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏. üì≤\n"
        "–¢–∏–º —á–∞—Å–æ–º –≤–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–∞—à–µ –º–µ–Ω—é –∞–±–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞ –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É.",
        reply_markup=ReplyKeyboardRemove()
    )

    # –î–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ"
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    btn_done = KeyboardButton("–ì–æ—Ç–æ–≤–æ")
    keyboard.add(btn_done)
    await message.answer("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ì–æ—Ç–æ–≤–æ¬ª, —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=keyboard)

    await state.finish()


@dp.message_handler(lambda m: m.text == "–ì–æ—Ç–æ–≤–æ", state='*')
async def process_done(message: types.Message, state: FSMContext):
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.
    """
    await cmd_start(message, state)


# ==============================================================================
# 6. –ú–ï–¢–û–î–ò STARTUP/SHUTDOWN –î–õ–Ø WEBHOOK
# ==============================================================================
async def on_startup(dp):
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ webhook
    await bot.set_webhook(WEBHOOK_URL)
    logging.info(f"Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {WEBHOOK_URL}")

async def on_shutdown(dp):
    # –í–∏–¥–∞–ª—è—î–º–æ webhook
    await bot.delete_webhook()
    logging.info("Webhook –≤–∏–¥–∞–ª–µ–Ω–æ")

# ==============================================================================
# 7. –ó–ê–ü–£–°–ö (WEBHOOK)
# ==============================================================================
if __name__ == "__main__":
    from aiogram.utils.executor import start_webhook

    # PORT –∑ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ (–¥–ª—è Render –∑–∞–∑–≤–∏—á–∞–π)
    PORT = int(os.environ.get('PORT', 5000))

    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host="0.0.0.0",
        port=PORT
    )
