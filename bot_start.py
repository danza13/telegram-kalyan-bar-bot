import os
import logging
import re
import json
from datetime import datetime

from aiogram import Bot, Dispatcher, types
from aiogram.types import (ReplyKeyboardMarkup, KeyboardButton, WebAppInfo, 
                           ReplyKeyboardRemove, ContentType)
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor

logging.basicConfig(level=logging.INFO)

# ===================================================================
# 1. –ó–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è
# ===================================================================
BOT_TOKEN = os.getenv("BOT_TOKEN")  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")  # ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
WEBHOOK_DOMAIN = os.getenv("WEBHOOK_DOMAIN")  # https://xxxxx.onrender.com

if not BOT_TOKEN:
    raise ValueError("–£ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ BOT_TOKEN!")
if not ADMIN_CHAT_ID:
    raise ValueError("–£ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ADMIN_CHAT_ID!")
if not WEBHOOK_DOMAIN:
    raise ValueError("–£ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ WEBHOOK_DOMAIN!")

WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{WEBHOOK_DOMAIN}{WEBHOOK_PATH}"

# ===================================================================
# 2. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
# ===================================================================
bot = Bot(token=BOT_TOKEN, parse_mode=types.ParseMode.HTML)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# ===================================================================
# 3. –°—Ç–∞–Ω –º–∞—à–∏–Ω–∏ (FSM)
# ===================================================================
class BookingStates(StatesGroup):
    CONFIRM_DATA = State()
    WAITING_PHONE = State()

# ===================================================================
# 4. –ü—Ä–æ–º—ñ–∂–Ω–µ —Å—Ö–æ–≤–∏—â–µ –¥–∞–Ω–∏—Ö
# ===================================================================
user_booking_data = {}
# user_booking_data[user_id] = {
#   "place": "...",
#   "datetime_str": "...",
#   "guests": "...",
#   "name": "...",
#   "phone": "..."
# }

# ===================================================================
# 5. –•–µ–Ω–¥–ª–µ—Ä–∏
# ===================================================================

@dp.message_handler(commands=['start'], state='*')
async def cmd_start(message: types.Message, state: FSMContext):
    await state.finish()

    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üçΩ–ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Å—Ç–æ–ª–∏–∫"))
    kb.add(KeyboardButton(
        text="üìï–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–Ω—é",
        web_app=WebAppInfo(url="https://gustouapp.com/menu")
    ))

    text = (
        "–í—ñ—Ç–∞—î–º–æ –≤–∞—Å –≤ Telegram-–±–æ—Ç—ñ –∫–∞–ª—å—è–Ω-–±–∞—Ä GUSTO√öüí®\n"
        "–¢—É—Ç –í–∏ –º–æ–∂–µ—Ç–µ:\n"
        "üçΩ –ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Å—Ç–æ–ª–∏–∫\n"
        "üìï –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–Ω—é\n"
    )
    await message.answer(text, reply_markup=kb)

@dp.message_handler(lambda m: m.text == "üçΩ–ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Å—Ç–æ–ª–∏–∫", state='*')
async def cmd_book_table(message: types.Message, state: FSMContext):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    btn_open_form = KeyboardButton(
        text="üì≤–í—ñ–¥–∫—Ä–∏—Ç–∏ —Ñ–æ—Ä–º—É –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è",
        # –í–∞—à–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ WebApp GitHub Pages:
        web_app=WebAppInfo(url="https://danza13.github.io/telegram-kalyan-bar-bot/index.html")
    )
    btn_back = KeyboardButton("‚¨ÖÔ∏è–ù–∞–∑–∞–¥")
    kb.add(btn_open_form)
    kb.add(btn_back)

    await message.answer("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=kb)

@dp.message_handler(lambda m: m.text == "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", state='*')
async def cmd_back(message: types.Message, state: FSMContext):
    await cmd_start(message, state)

# –•–µ–Ω–¥–ª–µ—Ä, —è–∫–∏–π –ª–æ–≤–∏—Ç—å –¥–∞–Ω—ñ –∑ WebApp
@dp.message_handler(content_types=ContentType.WEB_APP_DATA, state='*')
async def handle_webapp_data(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö, —è–∫—ñ –ø—Ä–∏–π—à–ª–∏ –∑ WebApp —á–µ—Ä–µ–∑ tg.sendData(...).
    """
    try:
        data = json.loads(message.web_app_data.data)
    except Exception as e:
        logging.warning(f"–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON: {e}")
        await message.answer("–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö –∑ —Ñ–æ—Ä–º–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    # –û—á—ñ–∫—É—î–º–æ –ø–æ–ª—è:
    # place, datetime, name, guests
    user_id = message.from_user.id
    place = data.get("place")
    datetime_raw = data.get("datetime")
    name = data.get("name")
    guests = data.get("guests")

    if not (place and datetime_raw and name and guests):
        await message.answer("–î–µ—è–∫—ñ –ø–æ–ª—è –ø–æ—Ä–æ–∂–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    # –ü–∞—Ä—Å–∏–º–æ –¥–∞—Ç—É
    try:
        dt = datetime.strptime(datetime_raw, "%d.%m.%Y %H:%M")
        formatted_dt = dt.strftime("%d.%m.%Y %H:%M")
    except Exception as e:
        logging.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ –¥–∞—Ç—É: {e}")
        formatted_dt = datetime_raw

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —É user_booking_data
    user_booking_data[user_id] = {
        "place": place,
        "datetime_str": formatted_dt,
        "guests": guests,
        "name": name
    }

    check_text = (
        "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∞—à—ñ –¥–∞–Ω—ñ\n"
        f"üè† –ó–∞–∫–ª–∞–¥: {place}\n"
        f"üïí –ß–∞—Å —Ç–∞ –¥–∞—Ç–∞: {formatted_dt}\n"
        f"üë• –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ—Å—Ç–µ–π: {guests}\n"
        f"üìù –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ –æ—Å–æ–±–∞: {name}"
    )
    await message.answer(check_text)

    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    btn_next = KeyboardButton("–î–∞–ª—ñ")

    # –ö–Ω–æ–ø–∫–∞ "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏" —ñ–∑ query-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    base_url = "https://danza13.github.io/telegram-kalyan-bar-bot/index.html"
    url_edit = f"{base_url}?place={place}&datetime={datetime_raw}&name={name}&guests={guests}"
    btn_edit = KeyboardButton(
        text="–†–µ–¥–∞–≥—É–≤–∞—Ç–∏",
        web_app=WebAppInfo(url=url_edit)
    )
    btn_cancel = KeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏")
    kb.add(btn_next, btn_edit, btn_cancel)

    await message.answer("–Ø–∫—â–æ –≤—Å–µ –≤—ñ—Ä–Ω–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–î–∞–ª—ñ¬ª", reply_markup=kb)
    await BookingStates.CONFIRM_DATA.set()

@dp.message_handler(lambda m: m.text == "–°–∫–∞—Å—É–≤–∞—Ç–∏", state=[BookingStates.CONFIRM_DATA, BookingStates.WAITING_PHONE])
async def cmd_cancel_booking(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_booking_data.pop(user_id, None)

    await state.finish()
    await message.answer("–ë—Ä–æ–Ω—å —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    await cmd_start(message, state)

@dp.message_handler(lambda m: m.text == "–î–∞–ª—ñ", state=BookingStates.CONFIRM_DATA)
async def cmd_confirm_data(message: types.Message, state: FSMContext):
    await BookingStates.WAITING_PHONE.set()

    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    btn_share = KeyboardButton("–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)
    btn_cancel = KeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏")
    kb.add(btn_share, btn_cancel)

    await message.answer(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ—é:",
        reply_markup=kb
    )

@dp.message_handler(content_types=[ContentType.CONTACT, ContentType.TEXT], state=BookingStates.WAITING_PHONE)
async def cmd_handle_phone(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id not in user_booking_data:
        await message.answer("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è. –ü–æ—á–Ω—ñ—Ç—å –∑ /start.")
        await state.finish()
        return

    # –Ø–∫—â–æ contact ‚Äì –±–µ—Ä–µ–º–æ phone_number
    if message.contact:
        raw_phone = message.contact.phone_number
    else:
        raw_phone = message.text

    digits = re.sub(r"\D+", "", raw_phone)
    if len(digits) == 12 and digits.startswith("380"):
        phone = "+" + digits
    else:
        await message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä, –≤–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX")
        return

    user_booking_data[user_id]["phone"] = phone

    place = user_booking_data[user_id]["place"]
    dt_str = user_booking_data[user_id]["datetime_str"]
    guests = user_booking_data[user_id]["guests"]
    name = user_booking_data[user_id]["name"]

    admin_text = (
        "üìÖ <b>–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è</b>\n"
        f"üè† –ó–∞–∫–ª–∞–¥: {place}\n"
        f"üïí –ß–∞—Å —Ç–∞ –¥–∞—Ç–∞: {dt_str}\n"
        f"üë• –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ—Å—Ç–µ–π: {guests}\n"
        f"üìù –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ –æ—Å–æ–±–∞: {name}\n"
        f"üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {phone}"
    )
    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∞–¥–º—ñ–Ω—É
    await bot.send_message(ADMIN_CHAT_ID, admin_text)

    await message.answer(
        "–î—è–∫—É—î–º–æ, –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ! ‚úÖ\n"
        "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ–∑–∞–±–∞—Ä–æ–º –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏. üì≤\n"
        "–¢–∏–º —á–∞—Å–æ–º –≤–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–Ω—é –∞–±–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞ –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É.",
        reply_markup=ReplyKeyboardRemove()
    )

    kb_done = ReplyKeyboardMarkup(resize_keyboard=True)
    kb_done.add(KeyboardButton("–ì–æ—Ç–æ–≤–æ"))
    await message.answer("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ì–æ—Ç–æ–≤–æ¬ª, —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=kb_done)

    await state.finish()

@dp.message_handler(lambda m: m.text == "–ì–æ—Ç–æ–≤–æ", state='*')
async def cmd_done(message: types.Message, state: FSMContext):
    await cmd_start(message, state)

# ===================================================================
# 6. –ó–∞–ø—É—Å–∫
# ===================================================================
async def on_startup(dp):
    await bot.set_webhook(WEBHOOK_URL)
    logging.info(f"Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {WEBHOOK_URL}")

async def on_shutdown(dp):
    await bot.delete_webhook()
    logging.info("Webhook –≤–∏–¥–∞–ª–µ–Ω–æ")

if __name__ == "__main__":
    from aiogram.utils.executor import start_webhook

    PORT = int(os.getenv("PORT", 5000))
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host="0.0.0.0",
        port=PORT
    )
